---
- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    regamis:
      - reg: us-east-1
        ami: ami-67a3a90d
      - reg: us-west-2
        ami: ami-c7a451a7
      - reg: eu-west-1
        ami: ami-9c9819ef
      - reg: ap-northeast-1
        ami: ami-7e4a5b10
      - reg: ap-southeast-2
        ami: ami-b8cbe8db
      - reg: us-west-1
        ami: ami-b7d5a8d7
      - reg: ap-southeast-1
        ami: ami-be63a9dd
      - reg: eu-central-1
        ami: ami-9aeb0af5

  vars_prompt:
    - name: "region"
      prompt: "Desired region"
      private: no
    - name: "clustname"
      prompt: "Name of the cluster"
      private: no
    - name: "taskdef"
      prompt: "Name of task definition family"
      private: no
    - name: "descount"
      prompt: "Desired Count of task"
      private: no
    - name: "subnets"
      prompt: "Comma separated list of subnet ids for ELB and ASG"
      private: no
    - name: "instype"
      prompt: "Instance type"
      private: no
    - name: "keyname"
      prompt: "EC2 KeyPair name"
      private: no
    - name: "desiredcap"
      prompt: "Desired number of instances in ECS Cluster"
      private: no
    - name: "maxsize"
      prompt: "Maximum number of instances in ECS Cluster"
      private: no

  tasks:

    - name: "Create ECS Cluster"
      ecs_cluster:
        name: "{{clustname}}"
        state: present
        region: "{{region}}"
      register: clustout

    - name: "Create Task Definition"
      ecs_taskdefinition:
        containers:
          - name: simple-app
            cpu: 10
            essential: true
            image: "httpd:2.4"
            memory: 300
            mountPoints:
            - containerPath: /usr/local/apache2/htdocs
              sourceVolume: my-vol
            portMappings:
            - containerPort: 80
              hostPort: 80
          - name: busybox
            command:
              - "/bin/sh -c \"while true; do echo '<html> <head> <title>Amazon ECS Sample App</title> <style>body {margin-top: 40px; background-color: #333;} </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now running on a container in Amazon ECS, and was launched using...<br/><br/><img src=\"http://i.imgur.com/tKFYe0b.png\" alt=\"ANSIBLE\"></p>' > top; /bin/date > date ; echo '</div></body></html>' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html ; sleep 1; done\""
            cpu: 10
            entryPoint:
            - sh
            - "-c"
            essential: false
            image: busybox
            memory: 200
            volumesFrom:
            - sourceContainer: simple-app
        volumes:
        - name: my-vol
        family: "{{taskdef}}"
        state: present
        region: "{{region}}"
      register: taskdefout

    - name: "Create ECS ELB"
      ec2_elb_lb:
        name: "{{clustname}}-elb"
        state: present
        region: "{{region}}"
        subnets: "{{subnets}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        health_check:
          ping_protocol: http
          ping_port: 80
          ping_path: "/"
          response_timeout: 5
          interval: 30
          unhealthy_threshold: 10
          healthy_threshold: 2
      register: elbout

    - name: "Create EC2 Role"
      iam:
        iam_type: role
        name: "{{clustname}}-EC2Role"
        state: present

    - name: "Attach Policy to EC2 Role"
      iam_policy:
        iam_type: role
        iam_name: "{{clustname}}-EC2Role"
        policy_name: "{{clustname}}-EC2Role-Policy"
        state: present
        policy_json:
          Statement:
            -
              Effect: "Allow"
              Action:
                - "ecs:CreateCluster"
                - "ecs:RegisterContainerInstance"
                - "ecs:DeregisterContainerInstance"
                - "ecs:DiscoverPollEndpoint"
                - "ecs:Submit*"
                - "ecs:StartTelemetrySession"
                - "ecs:Poll"
                - "ecr:GetAuthorizationToken"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
              Resource: "*"

    - pause: seconds=10

    - name: "Create ASG Launch Config"
      ec2_lc:
        name: "{{clustname}}-LC"
        state: present
        region: "{{region}}"
        image_id: "{{ regamis | selectattr('reg', 'equalto', region ) | map(attribute='ami') | join('') }}"
        key_name: "{{keyname}}"
        instance_type: "{{instype}}"
        instance_profile_name: "{{clustname}}-EC2Role"
        user_data: |
            #!/bin/bash
            echo "ECS_CLUSTER={{clustname}}" >> /etc/ecs/ecs.config

    - name: "Create Autoscaling Group"
      ec2_asg:
        name: "{{clustname}}-ASG"
        state: present
        region: "{{region}}"
        vpc_zone_identifier: "{{subnets}}"
        launch_config_name: "{{clustname}}-LC"
        replace_all_instances: yes
        min_size: 1
        max_size: "{{maxsize}}"
        desired_capacity: "{{desiredcap}}"
        tags:
          - Name: "{{clustname}}-Inst"
            propagate_at_launch: yes
        wait_for_instances: yes

    - name: "Create ECS Service Role"
      iam:
        iam_type: role
        name: "{{clustname}}-ECSServiceRole"
        state: present
        trust_policy:
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com

    - name: "Attach Policy to ECS Service Role"
      iam_policy:
        iam_type: role
        iam_name: "{{clustname}}-ECSServiceRole"
        policy_name: "{{clustname}}-ECSServiceRole-Policy"
        state: present
        policy_json:
          Statement:
            -
              Effect: "Allow"
              Action:
                - "elasticloadbalancing:Describe*"
                - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                - "ec2:Describe*"
                - "ec2:AuthorizeSecurityGroupIngress"
              Resource: "*"

    - pause: seconds=10

    - name: "Create ECS Service"
      ecs_service:
        name: "{{clustname}}-Service"
        state: present
        region: "{{region}}"
        cluster: "{{clustname}}"
        load_balancers:
          -
            loadBalancerName: "{{clustname}}-elb"
            containerName: "{{taskdefout['taskdefinition']['containerDefinitions'][0]['name']}}"
            containerPort: 80
        role: "{{clustname}}-ECSServiceRole"
        task_definition: "{{taskdef}}:{{taskdefout['taskdefinition']['revision']}}"
        desired_count: "{{descount}}"

    - debug: msg={{elbout['elb']['hosted_zone_name']}}

